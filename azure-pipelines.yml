# Copyright (c) 2019-2020 Yoann MOUGNIBAS
#
# This file is part of LazyCook.
#
# LazyCook is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LazyCook is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LazyCook.  If not, see <https://www.gnu.org/licenses/>.

# Trigger a build on any branch
#trigger:
#- master

# Use this Microsoft based agent (ubuntu LTS release)
pool:
  vmImage: 'ubuntu-20.04'

# Build name
name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Build variables
variables:
  BuildConfiguration: 'Release'

# Pipeline's stages
# Only one actually : Build
stages:

  # "Build" stage
  - stage : Build
    jobs:
      - job: build
        steps:
          # Use ".NET Core CLI" task to restore
          # It is recommended that an explicit 'dotnet restore' step be used to restore packages.
          - task: DotNetCoreCLI@2
            name: 'dotnet_restore'
            inputs:
              command: 'restore'
          # Use ".NET Core CLI" task to build
          - task: DotNetCoreCLI@2
            name: 'dotnet_build'
            inputs:
              command: 'build'
              arguments: '--configuration $(BuildConfiguration)'
          # Use ".NET Core CLI" task to invoke "test" command
          # Test results will be automatically published (discovered as ".trx" file format)
          # Also collect the code coverage, even if pipeline don't seem to do anything with it.
          - task: DotNetCoreCLI@2
            name: 'dotnet_test'
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration) --logger trx --collect "XPlat Code Coverage"'
          # Cobertura Code Coverage results need to be published using dedicated "Publish Code Coverage Results" task
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/CoverageResults/coverage.cobertura.xml'
            name: 'code_coverage_cobertura_publish'
